{"remainingRequest":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/src/components/Board.vue?vue&type=style&index=0&id=e1ee1034&lang=scss&scoped=true","dependencies":[{"path":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/src/components/Board.vue","mtime":1612164999704},{"path":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgI2JvYXJkLWZyYW1lIHsKICAgIG1heC13aWR0aDogNTAwcHg7CiAgICBtYXgtaGVpZ2h0OiA1MDBweDsKICAgIHdpZHRoOiA5MHZ3OwogICAgaGVpZ2h0OiA5MHZ3OwogICAgYm9yZGVyOiAxcHggcmdiKDYyLCA2MiwgNjYpIHNvbGlkOwogICAgcGFkZGluZzogMTJweCAwOwoKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwoKICAgIC5ib2FyZC1yb3cgewogICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAvIDEyKTsKICAgICAgd2lkdGg6IDEwMCU7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIH0KCiAgICAuYm9hcmQtcG9pbnQgewogICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLyA2KTsKICAgICAgZm9udC1zaXplOiAxMnB4OwogICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIH0KCiAgICAjcGxheWVyLXBvc2l0aW9uIHsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIGZvbnQtc2l6ZTogMTJweDsKICAgIH0KCiAgICAjZW1wdHktcG9zaXRpb24gewogICAgICBmb250LXNpemU6IDExcHg7CiAgICB9CgoKICB9Cgo="},{"version":3,"sources":["/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/src/components/Board.vue"],"names":[],"mappings":";EAoIE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;;IAEf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB;;IAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB;;IAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjB;;IAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjB;;;EAGF","file":"/Users/jacob/Documents/Post-Bootcamp/vue-projects/catan-randomiser/src/components/Board.vue","sourceRoot":"","sourcesContent":["<template>\n  <div id=\"board-frame\">\n    <div\n      class=\"board-row\"\n      v-for=\"(row, index) in boardArray\"\n      :key=\"index\"\n    >\n      <span\n        class=\"board-point\"\n        v-for=\"(point, index) in row\"\n        :key=\"index\"\n        v-bind:id=\"point !== 0? 'player-position': 'empty-position'\"\n      >\n        <span> {{ point === 0 ? 'o' : point }}</span>\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport boardData from '../assets/board.json';\n\nexport default {\n  name: 'Board',\n  components: {},\n  props: {\n    numberOfPlayers: {\n      type: Number,\n      required: true\n    },\n    reRandomise: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data () {\n    return {\n      boardRows: boardData.rowLengths,\n      boardArray: []\n    }\n  },\n  methods: {\n    createEmptyBoardArray() {\n      let tempArray = [];\n      this.boardRows.forEach((rowLength) => {\n        tempArray.push(Array(rowLength).fill(0));\n      });\n\n      this.boardArray = tempArray;\n      return tempArray;\n    },\n\n    randomisePlayers() {\n\n      let tempBoardArray = this.createEmptyBoardArray();\n      //  = this.boardArray;\n      const totalBoardRows = 12;\n      let playerPositions = [];\n      for (let i = 0; i < this.numberOfPlayers; i++) { playerPositions.push([]) }\n\n      const getRandomPlayerPos = () => {\n        const playerRow = Math.floor(Math.random() * totalBoardRows);\n        const playerCol = Math.floor(Math.random(tempBoardArray[playerRow].length)\n                          * tempBoardArray[playerRow].length);\n        const playerPos = [playerRow, playerCol];\n\n        return playerPos;\n      }\n\n      const addPlayerPositionsToBoard = () => {\n        playerPositions.forEach((pos, index) => {\n          tempBoardArray[pos[0][0]][pos[0][1]] = index + 1;\n          tempBoardArray[pos[1][0]][pos[1][1]] = index + 1;\n        })\n\n      }\n\n\n      for (let i = 0; i < 2; i++ ) {\n        for ( let j = 0; j < this.numberOfPlayers; j++ ) {\n          let satifiesRequirements = false;\n\n          while ( !satifiesRequirements ) {\n            let tempPlayerPos = getRandomPlayerPos();\n\n            let allPointsSatisfy = true;\n\n            playerPositions.flat().forEach((pos) => {\n              const neighbours = [[0,0], [-1, -1], [-1, 0], [-1, 1], [0, 1],\n                                  [1, 1], [1, 0], [1, -1], [0, -1]];\n              neighbours.forEach((neighbour) => {\n                const x = tempPlayerPos[0] + neighbour[0];\n                const y = tempPlayerPos[1] + neighbour[1];\n\n                const isNeighbourOnBoard = (x >= 0 &&\n                                          x < totalBoardRows &&\n                                          y >= 0 &&\n                                          y < tempBoardArray[tempPlayerPos[0]].length);\n\n                if (isNeighbourOnBoard && (pos[0] === x  && pos[1] === y)) {\n                  allPointsSatisfy = false;\n                }\n              });\n            });\n\n            if (allPointsSatisfy) {\n              playerPositions[j].push(tempPlayerPos);\n              satifiesRequirements = true;\n            }\n          }\n        }\n      }\n\n      addPlayerPositionsToBoard();\n    }\n  },\n  mounted() {\n    this.randomisePlayers();\n  },\n  watch: {\n    numberOfPlayers () {\n      this.randomisePlayers();\n    },\n    reRandomise () {\n      this.randomisePlayers();\n      this.$emit('setReRandomiseToFalse')\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n  #board-frame {\n    max-width: 500px;\n    max-height: 500px;\n    width: 90vw;\n    height: 90vw;\n    border: 1px rgb(62, 62, 66) solid;\n    padding: 12px 0;\n\n    display: flex;\n    flex-direction: column;\n\n    .board-row {\n      height: calc(100% / 12);\n      width: 100%;\n      text-align: center;\n    }\n\n    .board-point {\n      display: inline-block;\n      width: calc(100% / 6);\n      font-size: 12px;\n      height: 100%;\n      text-align: center;\n    }\n\n    #player-position {\n      font-weight: bold;\n      font-size: 12px;\n    }\n\n    #empty-position {\n      font-size: 11px;\n    }\n\n\n  }\n\n</style>\n"]}]}